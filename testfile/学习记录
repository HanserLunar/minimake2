学习途径：deepseek，csdn博客，bilibili。


					1,git
git是强大的文档管理工具，它可以记录工程文件的每次修改，也能利用分支尝试开发新功能而不损坏主代码。若是对某次修改不满意，我们可以随时回溯到某次提交。

大多时候git操作仅需三个命令：git add .    把所有修改送入缓冲区
			  git commit     把缓冲区全部内容送入本地git仓库 	 
			   git push      把本地仓库备份到github
两个查询命令：git log    查询提交日志 
	    git status   查看缓冲区

此外还有一些命令  git init  初始化本地仓库
	git remote add origin git@github.com:your-username/your-repo-name.git  关联远程仓库
		git clone [url]  克隆远程仓库
		
		

					2，Makefile语法
什么是Makefile？
Makefile是一种文本文件，包含了整个项目的构建规则。其基本结构是
target： dependency
	n*recipe
target是目标文件，这是每个基本结构的最后归宿。
dependency是依赖，构造目标文件时可能需要用到的文件
recipe是配方，是构造目标的方法
除了基本结构外，还有变量。变量类似于define，是单纯的文本替换
结构是 key=value，需要使用时其结构为 $(key),make工具会把这个结构解释成 value

自动变量 	 $@	当前规则中的目标文件名
		 $<	当前规则中的第一个依赖文件名
		 $^	当前规则中所有依赖文件的列表
		 $?	比目标文件新的所有依赖文件的列表	
		 
伪目标 结构：.PHONY：fake_target
作用：伪目标定义的target并不与文件关联，仅仅是一种动作的标签。我想有些操作不好放在某个recipe里，故可以用伪目标实现这些操作。



					3，字符串读写和文件操作
makefile本质是一种文本文件，因此文件读取和字符串处理是重点。
以下是本次项目利用到的标准库的函数：
strlen()：返回值是字符串的有效长度，遇到第一个\0字符结束
strcmp():
strcpy():




					4，ubuntu操作系统的使用
Bash:一种交互式命令工具，是用户与操作系统内核的桥梁。它接收用户的命令，将其解释并传递给操作系统内核来执行。
常用命令：ls	列出目录内容
	  cd	切换目录
	  pwd	当前目录的绝对路径
	  mdkir 创建新目录
	  rmdir 移除空目录
	  rm	删除文件或目录
	  mv	复制文件或目录
	  touch 创建空文件或更新文件时间戳
	  cat	查看文件全部内容
	  echo  打印信息
	  
gcc:是一个功能强大的开源编译器系统，支持多种编程语言。
常用命令：
	# 指定输出文件名
	gcc hello.c -o hello

	# 只预处理，不编译
	gcc -E hello.c -o hello.i

	# 只编译不汇编，生成汇编代码
	gcc -S hello.c -o hello.s

	# 只编译不链接，生成目标文件
	gcc -c hello.c -o hello.o
	
	#多文件编译
	gcc main.c utils.c math.c -o myprogram

					5，图算法
图算法可以表示多个东西的相互关系。
概念：
	顶点：某种具体物体的抽象表示
	边：物体间关系的抽象表示
	有向图：有方向的边和顶点组成的图形
	无向图：无方向的边和顶点组成的图形
	邻接矩阵：用二维矩阵的方式表达顶点和边，添加和删除顶点较为麻烦，但查询十分方便
	邻接链表：用链表的方式表达顶点和边，添加和删除顶点较为简单，但查询十分困难
	有权图：边不仅代表连接关系，边还有权重
	入度：指向同一个顶点的边的数目
	出度：从同一个顶点引出的边的数目
Makefile文件应该是一个固定的文本文件，目标和依赖的数量是确定的，因此用邻接矩阵的方式更为合适。

图遍历：广度优先算法  深度优先算法
广度优先：从指定顶点开始，逐层向外遍历。创建一个队列，把和正在拜访的顶点有连接关系的顶点全都加入队列中，在队列中选择下一个要拜访的顶点，反复进行上述过程直到可以拜访的顶点全部被拜访。

深度优先：从指定顶点开始不断拜访与其有连接关系的未被拜访过的顶点，若没有顶点可拜访，则回退到之前的顶点直到可以寻找到下一个未被拜访的顶点。可用递归实现。

Kahn算法：用于判断图是否为有向无环图（DAG）。
操作：将入度为0的顶点加入队列，从队列中取出顶点，删去该顶点及该顶点的连接关系，即让与该顶点连接的顶点的入度减1，再次寻找入度为0的顶点，把它加入队列，重复上述过程直到队列为空。若最后仍有顶点的入度不为0，则可认定图有环。


					6，输出命令及进程

					7，哈希表
什么是哈希表？
	数组，查找方便，但删除和插入较困难，链表，插入和删除方便，但查找较困难，哈希表则是两者的混合使用，可以实现数据的快速插入、删除和查找。
	
哈希表的基本结构是节点，节点存储了key和value，以及指向下一个节点的指针next。key是该节点的名字，是找到该节点的关键，value是节点存储的数据，是节点存在的理由，next是用来寻找节点的桥梁。

节点之上有哈希表，哈希表是一个数组，数组存储了节点链表的头指针。通过哈希函数，我们可以找到key所在的链表的头指针，接着遍历链表即可找到所需的key。

数据结构之外有哈希函数，哈希函数的输入是key（一般来说key是字符串），输出是一个不大于哈希表长度的无符号整数，即哈希表的索引。一个好的哈希函数应该是计算速度快，输出分布均匀，输出确定的，确保哈希表充分利用，同一个key输入能得到同一个索引。

DJB2哈希：核心公式 hash=hash*33+c 。  33哪来的？magic！初始值5381哪来的？magic！c是字符的阿斯克值。最后输出应该限制在表长内，因此输出是 hash%table_size







